  ____          _                            _ 
 / ___|___   __| | ___ _ __ ___   ___  _ __ | |
| |   / _ \ / _` |/ _ \ '_ ` _ \ / _ \| '_ \| |
| |__| (_) | (_| |  __/ | | | | | (_) | | | |_|
 \____\___/ \__,_|\___|_| |_| |_|\___/|_| |_(_)

University of Guelph
Software Systems Development and Integration
CIS 2750, Fall 2015

Author: Neivin I. Mathew
Date: 2015/10/02

-----------------------------------------------------------
RUNNING INSTRUCTIONS:
-----------------------------------------------------------
In the root directory, run the command: make 
Once compliled, the executable "codemon" can be run with the following constraints:

codemon -c <filename>
assemble the codemon in the provided filename and write the binary output to stdout.

codemon -t <filename> <limit>
test mode: load the binary codemon from the provided filename and submit it to the Codex for execution for a number of turns given by limit (which can be 0 - this will simply load your Codemon into memory and display it).

codemon -s <filename1> <filename2> <limit>
self mode: load the two binary codemon from the provided filenames and submit it to the Codex for execution for a number of turns given by limit (which can be 0 - this will simply load your Codemon into memory and display it).

codemon -p N <filename>
pvp mode: load the binary codemon from the provided filename and submit it to the Codex for competition in a PVP N match (where N = {2,3,4}, e.g. an argument of -p 2 submits the codemon for a PVP2 match).

codemon -r <reportid>
report mode: attempt to fetch the battle report associated with the provided reportid and display it to stdout.

-----------------------------------------------------------
FILE DESCRIPTIONS:
-----------------------------------------------------------

README: This file. Contains information on how to run the program and a description of the
		source code files.

pledge.txt: Academic Integrity pledge.

Makefile: Contains dependencies to compile the program

HEADER FILES:
	arch.h: Architecture-specific integral types for the project
	
	common.h: Common client/server definitions for the project
	
	loader.h: Definitions of methods and variables used in loader.c
	
	parser.h: Definitions of methods and variables used in parser.c
	
	checker.h: Definitions of methods and variables used in checker.c

	packager.h: Definitions of methods and variables used in packager.c

C FILES:
	client.c: Networking routines needed for client applications to submit to the Codex server.

	loader.c: Routines to load a binary codemon into a Codemon structure

	parser.c: Routines to parse a codemon program into a list of specific instructions.

	checker.c: Routines to resolve labels and enforce restrictions on a codemon program.

	packager.c: Routines to convert a parsed instruction into binary data.

	codemon.c: Main function to process command line arguments.